# 다차원 배열

배열 행렬의 일반화된 데이터 형식, 차원을 속성으로 갖는 벡터

벡터(1차원), 행렬(2차원) 모두 배열이라 할 수 있음

dim함수로 배열 생성



3차원 배열

```
a<-1:24
dim(a)<-c(3,4,2)
a

, , 1

     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12

, , 2

     [,1] [,2] [,3] [,4]
[1,]   13   16   19   22
[2,]   14   17   20   23
[3,]   15   18   21   24
```



`array`함수 : 다차원 배열 생성

```
> ary<-array(1:24 , c(3,4,2))
> ary[1,3,2]
[1] 19

> ary
, , 1

     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12

, , 2

     [,1] [,2] [,3] [,4]
[1,]   13   16   19   22
[2,]   14   17   20   23
[3,]   15   18   21   24

> ary[1,,]
     [,1] [,2]
[1,]    1   13
[2,]    4   16
[3,]    7   19
[4,]   10   22
```



ary배열의 2번째 면에 있는 1번 열의 값을 추출

```
> ary[,1,2]
[1] 13 14 15
```

자료구조가 벡터

행렬로 바꾸는 옵션

```
> ary[,1,2, drop=FALSE]
, , 1

     [,1]
[1,]   13
[2,]   14
[3,]   15
```





# 리스트

리스트는 다양한 데이터 타입을 저장할 수 있음
벡터와 행렬은 원소의 데이터 타입이 모두 같아야 함

```
> lst<-list(0.6,0.9,0.5)
> lst
[[1]]
[1] 0.6

[[2]]
[1] 0.9

[[3]]
[1] 0.5
```

[[1]]은 원소의 위치(인덱스)를 의미

[1] 0.6 은 원소의 값

리스트에는 스칼라, 벡터(숫자/문자), 행렬, 함수 저장 가능



```
> lst<-list(1.5, "apple",c(2,3,4), matrix(1:6,ncol=3), mean)
> lst
[[1]]
[1] 1.5

[[2]]
[1] "apple"

[[3]]
[1] 2 3 4

[[4]]
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

[[5]]
function (x, ...) 
UseMethod("mean")
<bytecode: 0x0000020eb88cdf18>
<environment: namespace:base>
```



```
lst<-list()
lst[[1]]<-1.5
```

빈곳에 직접 대입 



이름을 주면 [[1]] 형식이 $이름으로 변경된다

```

> names(lst)<-c("n1","n2","n3")
> lst
$n1
[1] 0.6

$n2
[1] 0.9

$n3
[1] 0.5

```

호출 `lst$n1`



`names(lst)` 로 이름만 확인

`length(lst)` 원소의 개수



```
> product<-list(id="a001",name="mouse",price=30000)
> product$name
[1] "mouse"
> product[["name"]]
[1] "mouse"
> product[c("name","price")]
$name
[1] "mouse"

$price
[1] 30000
```



~ 못들음

lst$three

lst$three$a

`lst[["three"]][["a"]]` 벡터

`lst['three']['a']` #리스트



```
product<-list(id="a001",name="mouse",price=30000)
product[3]
product[[3]]<-50000
product$price<-50000
product[["price"]]<-50000
product[3]<-50000 #값을 할당할 때는 [[]],[] 모두 가능
```



`product[3] <-c(20000,30000)` 는 에러발생

`product[3] <-list(c(20000,30000))`



```
product[8:10] <-list(0.1,0.2,"0.3")
product
```

타입이 달라도 잘 됨



```
n<-c("one","two","three")
v<-c(100,200,300)
mylist<-list()
mylist[n]<-v
mylist
mylist[["two"]]<-NULL
mylist
```

값 할당 후 NULL할당하면 그 원소는 제거(삭제)된다



리스트 결합

```
#리스트 결합
w1<-list("a","b","c")
w2<-list("d","e","f")
c(w1,w2)
```



r의 수치연산 관련 함수 대부분은 벡터 자료구조를 사용한다
따라서 리스트는 벡터로 형변환 해주기

```
> mydata<-list(1.5, 2.0, 3.5, 4.5)
> mean(mydata)
[1] NA
경고메시지(들): 
In mean.default(mydata) :
  인자가 수치형 또는 논리형이 아니므로 NA를 반환합니다
```

`unlist` 함수: 리스트 -> 벡터

```
class(unlist(mydata))
mean(unlist(mydata))
```



# 🎄데이터 프레임

데이터 분석시 많이 쓰는편 

행과 열로 구성되며 2차원 구조 

행렬은 모든 데이터 타입이 일치되야 하지만 데이터 프레임은 그럴 필요가 없음 

데이터프레임 2차원, 리스트 1차원 구조



🔅데이터프레임은 *동일한 길이의 벡터* 이루어진 리스트를 구성요소로 하는 데이터 구조



data.frame() 함수를 이용하여 벡터로부터 데이터프레임을 생성



```
> v1<-c("a2","a2","a3")
> v2<-c(10,20,30)
> v3<-c("x","y")
> data.frame(v1,v2)
  v1 v2
1 a2 10
2 a2 20
3 a3 30
```

```
> data.frame(v1,v2,v3)
Error in data.frame(v1, v2, v3) : 
  arguments imply differing number of rows: 3, 2
```

길이가 다르다고~



```
> df<-data.frame(v1,v2,v3)
> str(df)
'data.frame':	3 obs. of  3 variables:
 $ v1: chr  "a1" "a2" "a3"
 $ v2: num  10 20 30
 $ v3: chr  "x" "y" "z"
```

observations -> obs

3 variable (features)

![image-20210223114423046](3day.assets/image-20210223114423046.png)

각 이미지 데이터의 차원은 10000차원 , feature가 10000개 있다

각각의 이미지가 10000차원 공간의 (0,20,...,255) 위치에 점으로 표시가 됨



## 행이름 넣어주기

```
#행 이름으로 특정 벡터를 지정
data.frame(row.names=v1,v2,v3)

>data.frame(id=v1, name=v2, price=v3)
  id name price
1 a1   10     x
2 a2   20     y
3 a3   30     z
```

stringAsFactors #벡터 -> 데이터프레임 생성할때 데이터타입을 팩터로 지정
(Factor형태로서 string (문자열)을 읽겠습니까?)

`stringAsFactors =FALSE` #팩터로 문자열을 읽지 않겠다. 즉 문자열로 읽겠다

`stringAsFactors =TRUE` #팩터로 문자열을 읽겠다. 즉 문자열을 팩터로 읽겠다



```
> p<-data.frame(id=v1, price=v2, name=v3, stringsAsFactors =TRUE)
> str(p)
'data.frame':	3 obs. of  3 variables:
 $ id   : Factor w/ 3 levels "a1","a2","a3": 1 2 3
 $ price: num  10 20 30
 $ name : Factor w/ 3 levels "x","y","z": 1 2 3
```



문자열 총 10개, stringAsFctors=FALSE

2개 팩터 (chr -> factor 변환) , 8개 문자벡터



```
v1<-c("a1","a2","a3")
v2<-c(10,20,30)
v3<-c("x","Y","Z")
lst<-list(v1,v2,v3)
as.data.frame(lst)
```



이름 이뿌게

```
v1<-c("a1","a2","a3")
v2<-c(10,20,30)
v3<-c("x","Y","Z")

lst<-list(v1,v2,v3)

p<-as.data.frame(lst)
colnames(p)<-c("id","name","price")
p

  id name price
1 a1   10     x
2 a2   20     y
3 a3   30     z
```



length함수 : 행렬에서 전체 원소개수, 데이터프레임에서 **열**의 개수



datasets패키지 : r설치시 기본적으로 내장되어 있는 데이터셋

state.abb #미국의 50개 주 

state.name

state.area #평방마일

AirPassengers #국제여객.. 

그 외 https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html

`str(state.region)` 팩터로 나온다

```
> str(state.region)
 Factor w/ 4 levels "Northeast","South",..: 2 4 4 2 4 4 1 2 2 2 ...
```



```
us.state<-data.frame(state.abb, state.name,state.region,state.area)
us.state

   state.abb     state.name  state.region state.area
1         AL        Alabama         South      51609
2         AK         Alaska          West     589757
3         AZ        Arizona          West     113909
...
이런식으로 나옴
```



```
> str(us.state)

'data.frame':	50 obs. of  4 variables:
 $ state.abb   : chr  "AL" "AK" "AZ" "AR" ...
 $ state.name  : chr  "Alabama" "Alaska" "Arizona" "Arkansas" ...
 $ state.region: Factor w/ 4 levels "Northeast","South",..: 2 4 4 2 4 4 1 2 2 2 ...
 $ state.area  : num  51609 589757 113909 53104 158693 ...
```





#state.name 열 추출 

[[]] or [] 사용하여 열 추출 결과가 다르대 (타입)

[[]] : 열하나를 벡터or 팩터로 출력

[] : 데이터프레임이 추출, 하나 또는 여러개의 열을 추출

🧡

```
us.state [[2]] 
str(us.state [[2]]) #문자 벡터로 나온다

us.state [2] 
str(us.state [2]) #데이터 프레임으로 나온다! 
```

행렬에서 drop=FALSE 적용시, 출력 결과의 타입이 행렬

데이터 프레임에서는 drop=FALSE 적용시, 출력 결과의 타입이 데이터프레임

```
us.state[,2]
us.state[,2, drop=FALSE]
```



```
us.state[c("state.name","state.area")] #리스트 인덱싱
us.state[,c("state.name","state.area")] #행렬 인덱싱
```



-----

```
id<-c("a1","a2","a3")
price<-c(10,20,30)
name<-c("x","y","z")
product<-data.frame(id,name,price)
product
str(product)
#rbind() : 데이터프레임에 행 추가
product<-rbind(product,c("a4", "40", "k")) 
product

> product
  id name price
1 a1    x    10
2 a2    y    20
3 a3    z    30
4 a4   40     k
```



```
> product<-product[-4,]
> product
  id name price
1 a1    x    10
2 a2    y    20
3 a3    z    30
```

4번 행 제거



#여러 행 추가





리스트제거

```
temp<-temp[temp>mean(temp)]
temp
```

